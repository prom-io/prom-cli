/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TradeMarketplaceABIInterface extends utils.Interface {
  functions: {
    "acceptOffer(address,uint256,address,uint256)": FunctionFragment;
    "addressRegistry()": FunctionFragment;
    "buyItem(address,uint256,address,uint256)": FunctionFragment;
    "cancelListing(address,uint256)": FunctionFragment;
    "cancelOffer(address,uint256)": FunctionFragment;
    "collectionRoyalties(address)": FunctionFragment;
    "createOffer(address,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "listItem(address,uint256,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "listings(address,uint256,address)": FunctionFragment;
    "multicallBuy(address[],uint256[],address[],uint256[])": FunctionFragment;
    "multicallCancel(address[],uint256[])": FunctionFragment;
    "multicallList(address[],uint256[],uint256[],address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "offers(address,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerCollectionRoyalty(address,uint16,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royalties(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAddressRegistry(address)": FunctionFragment;
    "updateListing(address,uint256,address,uint256)": FunctionFragment;
    "validateItemSold(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOffer"
      | "addressRegistry"
      | "buyItem"
      | "cancelListing"
      | "cancelOffer"
      | "collectionRoyalties"
      | "createOffer"
      | "listItem"
      | "listings"
      | "multicallBuy"
      | "multicallCancel"
      | "multicallList"
      | "offers"
      | "owner"
      | "registerCollectionRoyalty"
      | "renounceOwnership"
      | "royalties"
      | "transferOwnership"
      | "updateAddressRegistry"
      | "updateListing"
      | "validateItemSold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionRoyalties",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallBuy",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallCancel",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallList",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerCollectionRoyalty",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royalties",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddressRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateItemSold",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multicallBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicallCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicallList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCollectionRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddressRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateItemSold",
    data: BytesLike
  ): Result;

  events: {
    "ItemCanceled(address,address,uint256)": EventFragment;
    "ItemListed(address,address,uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
    "ItemSold(address,address,address,uint256,uint256,address,uint256)": EventFragment;
    "ItemSoldInBundle(address,address,uint256)": EventFragment;
    "ItemUpdated(address,address,uint256,address,uint256)": EventFragment;
    "OfferCanceled(address,address,uint256)": EventFragment;
    "OfferCreated(address,address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoyaltyPayed(address,uint256)": EventFragment;
    "UpdatePlatformFee(uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSoldInBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyPayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePlatformFee"): EventFragment;
}

export interface ItemCanceledEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
}
export type ItemCanceledEvent = TypedEvent<
  [string, string, BigNumber],
  ItemCanceledEventObject
>;

export type ItemCanceledEventFilter = TypedEventFilter<ItemCanceledEvent>;

export interface ItemListedEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
  quantity: BigNumber;
  payToken: string;
  pricePerItem: BigNumber;
  startingTime: BigNumber;
  endTime: BigNumber;
}
export type ItemListedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ItemListedEventObject
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export interface ItemSoldEventObject {
  seller: string;
  buyer: string;
  nft: string;
  tokenId: BigNumber;
  quantity: BigNumber;
  payToken: string;
  pricePerItem: BigNumber;
}
export type ItemSoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, BigNumber],
  ItemSoldEventObject
>;

export type ItemSoldEventFilter = TypedEventFilter<ItemSoldEvent>;

export interface ItemSoldInBundleEventObject {
  seller: string;
  nft: string;
  tokenId: BigNumber;
}
export type ItemSoldInBundleEvent = TypedEvent<
  [string, string, BigNumber],
  ItemSoldInBundleEventObject
>;

export type ItemSoldInBundleEventFilter =
  TypedEventFilter<ItemSoldInBundleEvent>;

export interface ItemUpdatedEventObject {
  owner: string;
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  newPrice: BigNumber;
}
export type ItemUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  ItemUpdatedEventObject
>;

export type ItemUpdatedEventFilter = TypedEventFilter<ItemUpdatedEvent>;

export interface OfferCanceledEventObject {
  creator: string;
  nft: string;
  tokenId: BigNumber;
}
export type OfferCanceledEvent = TypedEvent<
  [string, string, BigNumber],
  OfferCanceledEventObject
>;

export type OfferCanceledEventFilter = TypedEventFilter<OfferCanceledEvent>;

export interface OfferCreatedEventObject {
  creator: string;
  nft: string;
  tokenId: BigNumber;
  quantity: BigNumber;
  payToken: string;
  pricePerItem: BigNumber;
  deadline: BigNumber;
}
export type OfferCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, BigNumber],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoyaltyPayedEventObject {
  collection: string;
  amount: BigNumber;
}
export type RoyaltyPayedEvent = TypedEvent<
  [string, BigNumber],
  RoyaltyPayedEventObject
>;

export type RoyaltyPayedEventFilter = TypedEventFilter<RoyaltyPayedEvent>;

export interface UpdatePlatformFeeEventObject {
  platformFee: number;
}
export type UpdatePlatformFeeEvent = TypedEvent<
  [number],
  UpdatePlatformFeeEventObject
>;

export type UpdatePlatformFeeEventFilter =
  TypedEventFilter<UpdatePlatformFeeEvent>;

export interface TradeMarketplaceABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradeMarketplaceABIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      _offerNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressRegistry(overrides?: CallOverrides): Promise<[string]>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionRoyalties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { royalty: number; feeRecipient: string }>;

    createOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _startingTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        payToken: string;
        pricePerItem: BigNumber;
        startingTime: BigNumber;
        endTime: BigNumber;
        nonce: BigNumber;
      }
    >;

    multicallBuy(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _owners: PromiseOrValue<string>[],
      _nonces: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicallCancel(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicallList(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      _payTokens: PromiseOrValue<string>[],
      _pricePerItems: PromiseOrValue<BigNumberish>[],
      _startingTimes: PromiseOrValue<BigNumberish>[],
      _endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        payToken: string;
        quantity: BigNumber;
        pricePerItem: BigNumber;
        deadline: BigNumber;
        offerNonce: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerCollectionRoyalty(
      _nftAddress: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAddressRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateItemSold(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _creator: PromiseOrValue<string>,
    _offerNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressRegistry(overrides?: CallOverrides): Promise<string>;

  buyItem(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionRoyalties(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, string] & { royalty: number; feeRecipient: string }>;

  createOffer(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _payToken: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    _pricePerItem: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listItem(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _payToken: PromiseOrValue<string>,
    _pricePerItem: PromiseOrValue<BigNumberish>,
    _startingTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listings(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      quantity: BigNumber;
      payToken: string;
      pricePerItem: BigNumber;
      startingTime: BigNumber;
      endTime: BigNumber;
      nonce: BigNumber;
    }
  >;

  multicallBuy(
    _nftAddresses: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _owners: PromiseOrValue<string>[],
    _nonces: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicallCancel(
    _nftAddresses: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicallList(
    _nftAddresses: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _quantities: PromiseOrValue<BigNumberish>[],
    _payTokens: PromiseOrValue<string>[],
    _pricePerItems: PromiseOrValue<BigNumberish>[],
    _startingTimes: PromiseOrValue<BigNumberish>[],
    _endTimes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      payToken: string;
      quantity: BigNumber;
      pricePerItem: BigNumber;
      deadline: BigNumber;
      offerNonce: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  registerCollectionRoyalty(
    _nftAddress: PromiseOrValue<string>,
    _royalty: PromiseOrValue<BigNumberish>,
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royalties(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAddressRegistry(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateListing(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _payToken: PromiseOrValue<string>,
    _newPricePerItem: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateItemSold(
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      _offerNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressRegistry(overrides?: CallOverrides): Promise<string>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionRoyalties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { royalty: number; feeRecipient: string }>;

    createOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    listItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _startingTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        quantity: BigNumber;
        payToken: string;
        pricePerItem: BigNumber;
        startingTime: BigNumber;
        endTime: BigNumber;
        nonce: BigNumber;
      }
    >;

    multicallBuy(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _owners: PromiseOrValue<string>[],
      _nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    multicallCancel(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    multicallList(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      _payTokens: PromiseOrValue<string>[],
      _pricePerItems: PromiseOrValue<BigNumberish>[],
      _startingTimes: PromiseOrValue<BigNumberish>[],
      _endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        payToken: string;
        quantity: BigNumber;
        pricePerItem: BigNumber;
        deadline: BigNumber;
        offerNonce: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    registerCollectionRoyalty(
      _nftAddress: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAddressRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateItemSold(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemCanceled(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null
    ): ItemCanceledEventFilter;
    ItemCanceled(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null
    ): ItemCanceledEventFilter;

    "ItemListed(address,address,uint256,uint256,address,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      quantity?: null,
      payToken?: null,
      pricePerItem?: null,
      startingTime?: null,
      endTime?: null
    ): ItemListedEventFilter;
    ItemListed(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      quantity?: null,
      payToken?: null,
      pricePerItem?: null,
      startingTime?: null,
      endTime?: null
    ): ItemListedEventFilter;

    "ItemSold(address,address,address,uint256,uint256,address,uint256)"(
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      quantity?: null,
      payToken?: null,
      pricePerItem?: null
    ): ItemSoldEventFilter;
    ItemSold(
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      quantity?: null,
      payToken?: null,
      pricePerItem?: null
    ): ItemSoldEventFilter;

    "ItemSoldInBundle(address,address,uint256)"(
      seller?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null
    ): ItemSoldInBundleEventFilter;
    ItemSoldInBundle(
      seller?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null
    ): ItemSoldInBundleEventFilter;

    "ItemUpdated(address,address,uint256,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      payToken?: null,
      newPrice?: null
    ): ItemUpdatedEventFilter;
    ItemUpdated(
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      payToken?: null,
      newPrice?: null
    ): ItemUpdatedEventFilter;

    "OfferCanceled(address,address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null
    ): OfferCanceledEventFilter;
    OfferCanceled(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null
    ): OfferCanceledEventFilter;

    "OfferCreated(address,address,uint256,uint256,address,uint256,uint256)"(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      quantity?: null,
      payToken?: null,
      pricePerItem?: null,
      deadline?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      quantity?: null,
      payToken?: null,
      pricePerItem?: null,
      deadline?: null
    ): OfferCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoyaltyPayed(address,uint256)"(
      collection?: null,
      amount?: null
    ): RoyaltyPayedEventFilter;
    RoyaltyPayed(collection?: null, amount?: null): RoyaltyPayedEventFilter;

    "UpdatePlatformFee(uint16)"(
      platformFee?: null
    ): UpdatePlatformFeeEventFilter;
    UpdatePlatformFee(platformFee?: null): UpdatePlatformFeeEventFilter;
  };

  estimateGas: {
    acceptOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      _offerNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionRoyalties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _startingTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicallBuy(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _owners: PromiseOrValue<string>[],
      _nonces: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicallCancel(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicallList(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      _payTokens: PromiseOrValue<string>[],
      _pricePerItems: PromiseOrValue<BigNumberish>[],
      _startingTimes: PromiseOrValue<BigNumberish>[],
      _endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerCollectionRoyalty(
      _nftAddress: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAddressRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateItemSold(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      _offerNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionRoyalties(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createOffer(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listItem(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _pricePerItem: PromiseOrValue<BigNumberish>,
      _startingTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicallBuy(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _owners: PromiseOrValue<string>[],
      _nonces: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicallCancel(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicallList(
      _nftAddresses: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      _payTokens: PromiseOrValue<string>[],
      _pricePerItems: PromiseOrValue<BigNumberish>[],
      _startingTimes: PromiseOrValue<BigNumberish>[],
      _endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerCollectionRoyalty(
      _nftAddress: PromiseOrValue<string>,
      _royalty: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAddressRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateListing(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _newPricePerItem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateItemSold(
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
